import{StaticComponent,DynamicComponent,Edge,StaticTable,DynamicTableRow,SearchBar,Input,Output,InputResults,Button,Checkbox}from"./component/component.js";class Portfolios extends StaticComponent{constructor({self:t,mode:e,root:s,csv:o}){super({self:t,mode:e,root:s}),this.csv=o,this.portfolios=[],this.to_delete=[],this.addButton=new Button({self:this.get("addButton"),root:this}),this.editButton=new Button({self:this.get("editButton"),root:this}).click(()=>{this.table.body.factory=[...this.table.body.subscribers],this.mode="edit"}),this.saveButton=new Button({self:document.querySelector("#saveChanges"),root:this}),this.saveButton.click(t=>{let e=document.querySelector("#saveChangesInput");if(e.placeholder===e.value){var o=JSON.stringify(this.data);this.table.body.notify("save"),this.render();let s=JSON.stringify(this.data);this.mode="default",s!==o?(o=JSON.parse(o).map((t,e)=>(t.name=JSON.parse(s)[e].name,t)),fetch(`?update=${JSON.stringify(o)}&to_delete=`+JSON.stringify(this.to_delete))):this.to_delete[0]&&fetch("?to_delete="+JSON.stringify(this.to_delete)),e.value="",this.to_delete=[]}}),this.addChild(Button,"factoryButton").click(()=>{this.table.body.notify("factory"),this.table.body.subscribers=this.table.body.factory,this.table.body.factory=[...this.table.body.subscribers],this.render(),this.mode="default"}),this.addChild(Button,"addButton"),this.addChild(StaticTable,"table"),this.addButton.subscribe(this.table),this.addButton.take=t=>{Number(t)<10?this.addButton.blocked=!1:this.addButton.blocked=!0},this.addChild(Output,"used"),this.used.subscribe(this.table),this.used.take=t=>{this.used.value=t},this.ioByState(this.state.mode),this.getAll("portfolio").forEach(t=>{this.table.add(new Portfolio({self:t,root:this}))}),this.addChild(Edge,"nothing"),this.nothing.subscribe(this.table),this.nothing.take=t=>{let e=null;e=t?"add":"remove",this.nothing.self.classList[e]("d-none")},this.addChild(Edge,"exist"),this.exist.subscribe(this.table),this.exist.take=t=>{let e=null;e=t?"remove":"add",this.exist.self.classList[e]("d-none")},this.table.render(),this.used.value=this.table.body.subscribers.length,this.editButton.self.classList[this.table.body.subscribers.length?"remove":"add"]("d-none")}get data(){let e=[];return this.table.body.subscribers.forEach(t=>{e.push({dbnumber:t.numberFactory.value,number:t.number.value,name:t.IOs.outName.value})}),e}replace(t,e){this.table.body.subscribers[t-1].number.value=e,this.table.body.subscribers[e-1].number.value=t,this.render()}render(){this.table.body.subscribers.sort((t,e)=>Number(t.number.value)-Number(e.number.value));let e=0;this.table.body.subscribers.forEach(t=>{e+=1,t.number.value=e}),this.table.clear(),this.table.render()}}class Portfolio extends DynamicTableRow{constructor({self:t,name:e="portfolio",root:s}){super({self:t,root:s,name:e}),this.addChild(Button,"deleteButton").click(()=>{this.root.table.body.subscribers=this.root.table.body.subscribers.filter(t=>t.number.value!==this.number.value),this.root.to_delete.push(Number(this.numberFactory.value)),this.root.render()}),this.addChild(Button,"moveUp").click(()=>{1!==Number(this.number.value)&&this.root.replace(Number(this.number.value),Number(this.number.value)-1)}),this.addChild(Button,"moveDown").click(()=>{Number(this.number.value)!==this.root.table.body.subscribers.length&&this.root.replace(Number(this.number.value),Number(this.number.value)+1)}),this.addChild(Output,"number"),this.addChild(Output,"numberFactory")}render(){this.moveDown.blocked=this.number.value>=this.root.table.body.subscribers.length,this.moveUp.blocked=this.number.value<=1}take(t){switch(t){case"save":this.IOs.outName.value=this.IOs.inName.value;case"factory":this.IOs.inName.value=this.IOs.outName.value}}}window.addEventListener("load",run,!1);let $portfolios,$csvButton;function run(){$portfolios=new Portfolios({self:document.querySelector('[data-el="portfolios"]'),csv:new Button({self:document.querySelector('[data-el="portfoliosCsv"]')})})}